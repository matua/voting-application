drop table if exists dishes CASCADE;

drop table if exists restaurants CASCADE;

drop table if exists roles CASCADE;

drop table if exists users CASCADE;

drop table if exists users_roles CASCADE;

drop table if exists votes CASCADE;

create table restaurants
(
    id   integer generated by default as identity primary key,
    name varchar(255) not null,
    constraint UQ_Restaurants_Name unique (name)
);

create table dishes
(
    id            integer generated by default as identity primary key,
    name          varchar(255) not null,
    date          timestamp    not null,
    price         integer      not null check (price >= 100 AND price <= 10000),
    restaurant_id integer      not null,
    constraint UQ_Dishes_Name unique (name),
    constraint FK_Dishes_Restaurants foreign key (restaurant_id) references restaurants
);


create table roles
(
    id   integer generated by default as identity primary key,
    name varchar(255) not null
);

create table users
(
    id                integer generated by default as identity primary key,
    activated         boolean      not null,
    email             varchar(255) not null,
    password          varchar(255) not null,
    registration_date timestamp,
    constraint UQ_Users_Email unique (email)
);

create table users_roles
(
    user_id integer not null,
    role_id integer not null,
    constraint FK_Users_roles_Users foreign key (user_id) references users,
    constraint FK_Users_roles_Roles foreign key (role_id) references roles
);

create table votes
(
    id            integer generated by default as identity primary key,
    voting_date   date    not null,
    voting_time   time    not null,
    restaurant_id integer not null,
    user_id       integer not null,
    constraint UQ_Votes_User_id_Voting_date unique (user_id, voting_date),
    constraint FK_Votes_Restaurants foreign key (restaurant_id) references restaurants on delete cascade,
    constraint FK_Votes_Users foreign key (user_id) references users
);